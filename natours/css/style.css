/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  /*
  Everything related to inheritable font characteristics should be put
  in the body tag rather than the above universal selector. This is primarily
  for performance reasons as the universal selector applies everywhere but fonts
  only apply to elements below the body.
  */
  font-family: "Lato", sans-serif;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.7;
  color: #777;

  /* white padding around entire web-page */
  padding: 30px;
}

.header {
  /* 95% of the viewport height */
  height: 95vh;
  /*

    two background images.
    order is important
    first is gradient with alpha that colors the image that peaks through in second layer
    */
  /* background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 131, 0.8)), url("../img/hero.jpg"); */
  /*
    The top of the image is anchored to the top of the .header.
  */
  /* background-position: top; */

  /* The other background properties can be optimized into the following. */
  background: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 131, 0.8)), url(../img/hero.jpg) top;

  /** whatever the width of the element will try to fit image to size */
  background-size: cover;

  position: relative;

  /* This clips everything not contained in the polygon. This defines a polygon that cuts own triangle in bottom right corner */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
}

.logo-box {
  position: absolute;
  left: 40px;
  top: 40px;
}

.logo {
  height: 35px;
}

.text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  text-align: center;
}

.heading-primary {
  color: #FFF;
  /* Make sure all text is uppercase */
  text-transform: uppercase;

  margin-bottom: 60px;

  /* this stops the shake at the end of the animation */
  backface-visibility: hidden;
}

.heading-primary-main {
  display: block;
  font-size: 60px;
  font-weight: 400;
  letter-spacing: 35px;
  padding-left: 35px;
  text-align: center;
  animation-name: moveInLeft;
  /* runs animation for this amount of time */
  animation-duration: 1s;
  animation-timing-function: ease-out;
}

.heading-primary-sub {
  display: block;
  font-size: 20px;
  font-weight: 700;
  letter-spacing: 17.4px;
  padding-left: 17.4px;
  text-align: center;
  animation-name: moveInRight;
  animation-duration: 1s;
  animation-timing-function: ease-out;
}

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-100px);
  }
  80% {
    transform: translateX(10px);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(100px);
  }
  80% {
    transform: translateX(-10px);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes moveInButton {
  0% {
    opacity: 0;
    transform: translateY(30px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

/*
link is the special pseudo class available on <a/> class as is visited:
*/
.button:link, .button:visited {
  display: inline-block;
  text-transform: uppercase;
  text-decoration: none;
  padding: 15px 40px;
  border-radius: 100px;
  /*
    This transition smooths the state transition for :hover and :active state.
    So translations are transitioned to and from
   */
  transition: all 0.2s;

  /* Require this relative as the :after psuedo element has absolute position which searches up parents till it finds relative */
  position: relative;
}

.button-animated {
  animation-name: moveInButton;
  animation-duration: 0.5s;
  animation-delay: 0.75s;
  animation-timing-function: ease-in-out;

  /*
   This applies the 0% animation properties before the animation starts
   */
  animation-fill-mode: backwards;
}

.button:hover {
  transform: translateY(-3px);

  box-shadow: /* x */ 0 /* y */ 10px /* blur */ 20px /* alpha value */ rgba(0, 0, 0, .2);
}

/* :active indicates when button is clicked */
.button:active {
  transform: translateY(-1px);
  /*
  The shadow seems closer and less blurry compared to hover

  This gives the user the feel that pressed button and it got closer to page so materialistic interaction
  */

  box-shadow: /* x */ 0 /* y */ 5px /* blur */ 10px /* alpha value */ rgba(0, 0, 0, .2);
}

.button-white {
  background-color: #ffffff;
  color: #777;
}

.button::after {
  /* The :after pseudo element has to have both a content and a display if you want it to display */
  content: "";
  /* It is inline-block because .button is alos an inline-block */
  display: inline-block;

  /*
  The :after psuedo element is treated like a child element so these 100% measures
  indicate it should be the same size as the container element.
  */
  height: 100%;
  width: 100%;
  border-radius: 100px;

  transition: all 0.4s;

  /* These next properties put it directly under the existing element */
  position: absolute;
  top: 0;
  left: 0;

  z-index: -1;
}

.button-white::after {
  background-color: #fff;
}

.button:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0;
}
